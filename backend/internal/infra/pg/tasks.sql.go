// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const completeTaskByID = `-- name: CompleteTaskByID :exec
UPDATE tasks
SET completed_at = $1
WHERE id = $2
`

type CompleteTaskByIDParams struct {
	CompletedAt pgtype.Timestamp
	ID          pgtype.UUID
}

func (q *Queries) CompleteTaskByID(ctx context.Context, arg CompleteTaskByIDParams) error {
	_, err := q.db.Exec(ctx, completeTaskByID, arg.CompletedAt, arg.ID)
	return err
}

const createTask = `-- name: CreateTask :one
INSERT INTO tasks ("user",
                   title,
                   description,
                   priority,
                   completed_at,
                   created_at,
                   updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
returning id, "user", title, description, completed_at, created_at, updated_at, priority
`

type CreateTaskParams struct {
	User        pgtype.UUID
	Title       string
	Description pgtype.Text
	Priority    pgtype.Int4
	CompletedAt pgtype.Timestamp
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.User,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.CompletedAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Title,
		&i.Description,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Priority,
	)
	return i, err
}

const deleteTaskByID = `-- name: DeleteTaskByID :exec
DELETE
FROM tasks
WHERE id = $1
`

func (q *Queries) DeleteTaskByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteTaskByID, id)
	return err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, "user", title, description, completed_at, created_at, updated_at, priority
FROM tasks
WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.User,
		&i.Title,
		&i.Description,
		&i.CompletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Priority,
	)
	return i, err
}

const listAllTasks = `-- name: ListAllTasks :many
SELECT id, "user", title, description, completed_at, created_at, updated_at, priority
FROM tasks
LIMIT $1 OFFSET $2
`

type ListAllTasksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAllTasks(ctx context.Context, arg ListAllTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listAllTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Title,
			&i.Description,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasksByUser = `-- name: ListTasksByUser :many
SELECT id, "user", title, description, completed_at, created_at, updated_at, priority
FROM tasks
WHERE "user" = $1
LIMIT $2 OFFSET $3
`

type ListTasksByUserParams struct {
	User   pgtype.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) ListTasksByUser(ctx context.Context, arg ListTasksByUserParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasksByUser, arg.User, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.User,
			&i.Title,
			&i.Description,
			&i.CompletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const uncompleteTaskByID = `-- name: UncompleteTaskByID :exec
UPDATE tasks
SET completed_at = null
WHERE id = $1
`

func (q *Queries) UncompleteTaskByID(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, uncompleteTaskByID, id)
	return err
}

const updateTaskByID = `-- name: UpdateTaskByID :exec
UPDATE tasks
SET title        = $1,
    description  = $2,
    priority     = $3,
    completed_at = $4,
    updated_at   = $5
WHERE id = $6
`

type UpdateTaskByIDParams struct {
	Title       string
	Description pgtype.Text
	Priority    pgtype.Int4
	CompletedAt pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
	ID          pgtype.UUID
}

func (q *Queries) UpdateTaskByID(ctx context.Context, arg UpdateTaskByIDParams) error {
	_, err := q.db.Exec(ctx, updateTaskByID,
		arg.Title,
		arg.Description,
		arg.Priority,
		arg.CompletedAt,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
